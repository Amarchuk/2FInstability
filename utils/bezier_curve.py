__author__ = 'amarch'
# -*- coding: utf-8 -*-

import numpy as np
from scipy.misc import comb

def bernstein_poly(i, n, t):
    """
     The Bernstein polynomial of n, i as a function of t
    """

    return comb(n, i) * ( t**(n-i) ) * (1 - t)**i


def bezier_curve(points, nTimes=1000):
    """
       Given a set of control points, return the
       bezier curve defined by the control points.

       points should be a list of lists, or list of tuples
       such as [ [1,1],
                 [2,3],
                 [4,5], ..[Xn, Yn] ]
        nTimes is the number of time steps, defaults to 1000

        See http://processingjs.nihongoresources.com/bezierinfo/
    """

    nPoints = len(points)
    xPoints = np.array([p[0] for p in points])
    yPoints = np.array([p[1] for p in points])

    t = np.linspace(0.0, 1.0, nTimes)

    polynomial_array = np.array([ bernstein_poly(i, nPoints-1, t) for i in range(0, nPoints) ])

    xvals = np.dot(xPoints, polynomial_array)
    yvals = np.dot(yPoints, polynomial_array)

    return lambda xxx: np.interp(xxx, xvals[::-1], yvals[::-1])


if __name__ == "__main__":
    from matplotlib import pyplot as plt
    import math

    points = [(-47.119999999999997, 66.989999999999995), (-41.590000000000003, 66.599999999999994), (-37.840000000000003, 70.150000000000006), (-34.630000000000003, 57.210000000000001), (-31.59, 68.510000000000005), (-29.27, 64.590000000000003), (-27.670000000000002, 58.5), (-26.420000000000002, 60.270000000000003), (-25.350000000000001, 52.719999999999999), (-24.280000000000001, 72.180000000000007), (-23.199999999999999, 55.600000000000001), (-22.129999999999999, 59.299999999999997), (-21.059999999999999, 68.099999999999994), (-20.170000000000002, 65.120000000000005), (-19.460000000000001, 69.790000000000006), (-18.739999999999998, 66.640000000000001), (-18.030000000000001, 74.420000000000002), (-17.309999999999999, 70.650000000000006), (-16.600000000000001, 75.719999999999999), (-15.890000000000001, 71.280000000000001), (-15.17, 77.260000000000005), (-14.460000000000001, 70.640000000000001), (-13.74, 82.420000000000002), (-13.029999999999999, 79.359999999999999), (-12.49, 85.709999999999994), (-12.140000000000001, 81.840000000000003), (-11.779999999999999, 88.180000000000007), (-11.42, 114.59), (-11.07, 94.849999999999994), (-10.710000000000001, 90.780000000000001), (-10.35, 99.890000000000001), (-10.0, 111.5), (-9.6400000000000006, 115.06999999999999), (-9.2799999999999994, 101.59999999999999), (-8.9199999999999999, 113.20999999999999), (-8.5700000000000003, 118.94), (-8.2100000000000009, 121.39), (-7.8499999999999996, 118.09), (-7.5, 119.88), (-7.1399999999999997, 115.29000000000001), (-6.7800000000000002, 120.05), (-6.4299999999999997, 121.56), (-6.0700000000000003, 130.75999999999999), (-5.71, 141.08000000000001), (-5.3499999999999996, 131.72), (-5.0, 131.66999999999999), (-4.6399999999999997, 139.31), (-4.2800000000000002, 141.40000000000001), (-3.9300000000000002, 145.43000000000001), (-3.5699999999999998, 146.99000000000001), (-3.21, 149.21000000000001), (-2.8599999999999999, 142.81), (-2.5, 146.19999999999999), (-2.1400000000000001, 149.87), (-1.78, 154.06999999999999), (-1.4299999999999999, 158.61000000000001), (-1.0700000000000001, 156.53999999999999), (-0.70999999999999996, 160.31999999999999), (-0.35999999999999999, 164.11000000000001), (0.0, 166.09), (0.35999999999999999, 161.88999999999999), (0.70999999999999996, 158.90000000000001), (1.0700000000000001, 162.22999999999999), (1.4299999999999999, 157.75), (1.78, 159.52000000000001), (2.1400000000000001, 155.43000000000001), (2.5, 153.41999999999999), (2.8599999999999999, 152.66), (3.21, 151.03), (3.5699999999999998, 143.24000000000001), (3.9300000000000002, 141.00999999999999), (4.2800000000000002, 148.16), (4.6399999999999997, 141.19999999999999), (5.0, 144.65000000000001), (5.3499999999999996, 136.68000000000001), (5.71, 135.30000000000001), (6.0700000000000003, 134.13999999999999), (6.4299999999999997, 131.53), (6.7800000000000002, 131.75), (7.1399999999999997, 127.2), (7.5, 126.97), (7.8499999999999996, 125.53), (8.2100000000000009, 123.91), (8.5700000000000003, 135.09), (8.9199999999999999, 117.47), (9.2799999999999994, 110.27), (9.6400000000000006, 106.06), (10.0, 114.25), (10.35, 131.63999999999999), (10.710000000000001, 121.3), (11.07, 119.61), (11.42, 98.180000000000007), (11.960000000000001, 98.950000000000003), (12.67, 107.25), (13.390000000000001, 98.290000000000006), (14.1, 88.5), (14.82, 97.530000000000001), (15.529999999999999, 91.25), (16.239999999999998, 90.209999999999994), (16.960000000000001, 76.859999999999999), (17.670000000000002, 80.590000000000003), (18.390000000000001, 82.560000000000002), (19.280000000000001, 63.979999999999997), (20.350000000000001, 82.959999999999994), (21.600000000000001, 81.359999999999999), (23.199999999999999, 53.75), (24.989999999999998, 68.799999999999997), (26.949999999999999, 61.109999999999999), (29.449999999999999, 65.879999999999995), (32.310000000000002, 66.730000000000004), (35.880000000000003, 70.25), (40.340000000000003, 50.880000000000003), (45.700000000000003, 58.229999999999997)]
    points = np.array(points)
    xpoints = [p[0] for p in points]
    ypoints = [p[1] for p in points]


    bez = bezier_curve(points, nTimes=1000)

    plt.plot(xpoints, ypoints, "ro", label='data')
    xpp = np.arange(-50, 50, 0.1)
    ypp = bez(xpp)
    plt.plot(xpp, ypp, label='bezier')
    plt.legend()
    plt.show()
